package org.pentanet.model;

import java.applet.Applet;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Properties;
import java.util.logging.Level;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;

import org.compiere.apps.AEnv;
import org.compiere.apps.AGlassPane;
import org.compiere.apps.AMenu;
import org.compiere.apps.Help;
import org.compiere.apps.WindowMenu;
import org.compiere.apps.form.FormFrame;
import org.compiere.apps.form.FormPanel;
import org.compiere.model.MQuery;
import org.compiere.model.MRole;
import org.compiere.model.MTable;
import org.compiere.model.MUser;
import org.compiere.model.MWindow;
import org.compiere.print.MPrintColor;
import org.compiere.process.ProcessInfo;
import org.compiere.swing.CButton;
import org.compiere.swing.CFrame;
import org.compiere.swing.CPanel;
import org.compiere.util.CLogger;
import org.compiere.util.DB;
import org.compiere.util.Env;
import org.compiere.util.Trace;
import org.pentanet.model.MButton;
import org.pentanet.model.MMONITOR;
import org.pentanet.model.MMONITORLINE;
import org.pentanet.model.MVentanaAsociada;
import org.pentanet.model.ViewMonitores.sincorinza;

public class El_monitor extends CFrame  implements FormPanel,ActionListener  {

    /** Creates new form El_monitor */
	private sincorinza refrescar ;
	private int el_tiempo = 10000;
	public El_monitor(int el_monitor, MenuMonitores menuMonitores) {
		this.elmonitor_id=el_monitor;
		this.elMenuMonitores = menuMonitores;
		addWindowListener(new java.awt.event.WindowAdapter() 
		{
			public void windowOpened(java.awt.event.WindowEvent evt) 
			{
				formWindowOpened(evt);
			}
		});
		refrescar= new sincorinza();
		refrescar.start();
        initComponents();
        createMenu();
       
        construyeTodo(this);
        m_frame = this;
    }
	private MenuMonitores elMenuMonitores=null;
	private JMenuBar 	menuBar = new JMenuBar();
	private ProcessInfo  m_pi;

	private int elmonitor_id;

	/**	WindowNo					*/
	private int			m_WindowNo;
	/** The GlassPane           	*/
	private AGlassPane  m_glassPane = new AGlassPane();
	/**	Description					*/
	private String		m_Description = null;
	/**	Help						*/
	private String		m_Help = null;
	/**	Menu Bar					*/
	
	/**	The Panel to be displayed	*/
	private FormPanel 	m_panel = null;
	/** Maximize Window				*/
	public boolean 		m_maximize = false;
	/**	Logger			*/
	private static CLogger log = CLogger.getCLogger(FormFrame.class);
// MONITOR
    private javax.swing.JPanel monitor;
    private javax.swing.JPanel monitordetalle;
    private JScrollPane ScrollMonitor;
  //  private JScrollPane ScrollMonitorDetalle;
    private JFrame m_frame=null;
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
		this.setIconImage(org.compiere.Adempiere.getImage16());
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setJMenuBar(menuBar);
        pack();
    }// </editor-fold>//GEN-END:initComponents


    public void setel_tiempo(int el_periodo)
    {
    	this.el_tiempo=el_periodo;
    }
	private void createMenu()
	{
		//      File
		JMenu mFile = AEnv.getMenu("File");
		menuBar.add(mFile);
		AEnv.addMenuItem("PrintScreen", null, KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN, 0), mFile, this);
		AEnv.addMenuItem("ScreenShot", null, KeyStroke.getKeyStroke(KeyEvent.VK_PRINTSCREEN, Event.SHIFT_MASK), mFile, this);
		AEnv.addMenuItem("Report", null, KeyStroke.getKeyStroke(KeyEvent.VK_P, Event.ALT_MASK), mFile, this);
		mFile.addSeparator();
		AEnv.addMenuItem("End", null, KeyStroke.getKeyStroke(KeyEvent.VK_X, Event.ALT_MASK), mFile, this);
		AEnv.addMenuItem("Exit", null, KeyStroke.getKeyStroke(KeyEvent.VK_X, Event.SHIFT_MASK+Event.ALT_MASK), mFile, this);

		//      View
		JMenu mView = AEnv.getMenu("View");
		menuBar.add(mView);

		if (MRole.getDefault().isAllow_Info_Product())
		{
			AEnv.addMenuItem("InfoProduct", null, KeyStroke.getKeyStroke(KeyEvent.VK_I, Event.ALT_MASK), mView, this);			
		}
		if (MRole.getDefault().isAllow_Info_BPartner())
		{
			AEnv.addMenuItem("InfoBPartner", null, KeyStroke.getKeyStroke(KeyEvent.VK_I, Event.ALT_MASK+Event.CTRL_MASK), mView, this);
		}
		if (MRole.getDefault().isShowAcct() && MRole.getDefault().isAllow_Info_Account())
		{
			AEnv.addMenuItem("InfoAccount", null, KeyStroke.getKeyStroke(KeyEvent.VK_I, Event.ALT_MASK+Event.CTRL_MASK), mView, this);
		}
		if (MRole.getDefault().isAllow_Info_Schedule())
		{
			AEnv.addMenuItem("InfoSchedule", null, null, mView, this);			
		}
		mView.addSeparator();
		if (MRole.getDefault().isAllow_Info_Order())
		{
			AEnv.addMenuItem("InfoOrder", "Info", null, mView, this);	
		}
		if (MRole.getDefault().isAllow_Info_Invoice())
		{
			AEnv.addMenuItem("InfoInvoice", "Info", null, mView, this);			
		}
		if (MRole.getDefault().isAllow_Info_InOut())
		{
			AEnv.addMenuItem("InfoInOut", "Info", null, mView, this);	
		}
		if (MRole.getDefault().isAllow_Info_Payment())
		{
			AEnv.addMenuItem("InfoPayment", "Info", null, mView, this);	
		}
		if (MRole.getDefault().isAllow_Info_CashJournal())
		{
			AEnv.addMenuItem("InfoCashLine", "Info", null, mView, this);	
		}
		if (MRole.getDefault().isAllow_Info_Resource())
		{
			AEnv.addMenuItem("InfoAssignment", "Info", null, mView, this);	
		}
		if (MRole.getDefault().isAllow_Info_Asset())
		{
			AEnv.addMenuItem("InfoAsset", "Info", null, mView, this);	
		}
		//      Tools
		JMenu mTools = AEnv.getMenu("Tools");
		menuBar.add(mTools);
		AEnv.addMenuItem("Calculator", null, null, mTools, this);
		AEnv.addMenuItem("Calendar", null, null, mTools, this);
		AEnv.addMenuItem("Editor", null, null, mTools, this);
		MUser user = MUser.get(Env.getCtx());
		if (user.isAdministrator())
			AEnv.addMenuItem("Script", null, null, mTools, this);
		if (MRole.getDefault().isShowPreference())
		{
			mTools.addSeparator();
			AEnv.addMenuItem("Preference", null, null, mTools, this);
		}
		
		//		Window
		AMenu aMenu = (AMenu)Env.getWindow(0);
		JMenu mWindow = new WindowMenu(aMenu.getWindowManager(), this);
		menuBar.add(mWindow);

		//      Help
		JMenu mHelp = AEnv.getMenu("Help");
		menuBar.add(mHelp);
		AEnv.addMenuItem("Help", "Help", KeyStroke.getKeyStroke(KeyEvent.VK_F1, 0),	mHelp, this);
		AEnv.addMenuItem("Online", null, null, mHelp, this);
		AEnv.addMenuItem("EMailSupport", null, null, mHelp, this);
		AEnv.addMenuItem("About", null, null, mHelp, this);
	}   //  createMenu


	public void actionPerformed(ActionEvent e)
	{
		String cmd = e.getActionCommand();
		if (cmd.equals("End"))
			dispose();
		else if (cmd.equals("Help"))
			actionHelp();
		else if (e.getSource() instanceof MButton)
		{
			
			MButton pi = (MButton)e.getSource();
			log.info(pi.getName());
			cmd_zoomAcross(pi.GetAD_Window_ID(),pi.GetNombreCampoID(),pi.GetValor_CampoID(), pi.GetAD_Table_ID());
		}
		else if (!AEnv.actionPerformed(cmd, m_WindowNo, this))
			log.log(Level.SEVERE, "Not handeled=" + cmd);
		
	}   //  actionPerformed
	/**
	 * 	Dispose
	 */
	public void dispose()
	{
		refrescar.stop();
		super.dispose();
	}
	private void cmd_zoomAcross(int la_ventana, String la_clave, int el_valor, int la_tabla)
	{
		int record_ID =el_valor;
		log.info("ID=" + record_ID);
		if (record_ID <= 0)
			return;
		MWindow el_windows = new MWindow(Env.getCtx(),la_ventana,null);
		MQuery query = new MQuery();
		String link = la_clave;
		if (link.length() == 0)
			link =la_clave;
		if (link.length() != 0)
		{
			query.addRestriction(link, MQuery.EQUAL,el_valor);
					
		}
	
		new MVentanaAsociada (elMenuMonitores, 
				el_windows, la_tabla, query);
	}	
	

	/**
	 *	Show Help
	 */
	private void actionHelp()
	{
		StringBuffer sb = new StringBuffer();
		if (m_Description != null && m_Description.length() > 0)
			sb.append("<h2>").append(m_Description).append("</h2>");
		if (m_Help != null && m_Help.length() > 0)
			sb.append("<p>").append(m_Help);
		Help hlp = new Help (Env.getFrame(this), this.getTitle(), sb.toString());
		hlp.setVisible(true);
	}	//	actionHelp


	/*************************************************************************
	 *  Set Window Busy
	 *  @param busy busy
	 */
	public void setBusy (boolean busy)
	{
		if (busy == m_glassPane.isVisible())
			return;
		log.info("Busy=" + busy);
		if (busy)
			setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
		else
			setCursor(Cursor.getDefaultCursor());
		m_glassPane.setMessage(null);
		m_glassPane.setVisible(busy);
		m_glassPane.requestFocus();
	}   //  setBusy

	/**
	 *  Set Busy Message
	 *  @param AD_Message message
	 */
	public void setBusyMessage (String AD_Message)
	{
		m_glassPane.setMessage(AD_Message);
	}   //  setBusyMessage

	/**
	 *  Set and start Busy Counter
	 *  @param time in seconds
	 */
	public void setBusyTimer (int time)
	{
		m_glassPane.setBusyTimer (time);
	}   //  setBusyTimer
	
	 
	/**
	 * 	Set Maximize Window
	 *	@param max maximize
	 */
	public void setMaximize (boolean max)
	{
		m_maximize = max;
	}	//	setMaximize
	 

	/**
	 * 	Form Window Opened.
	 * 	Maximize window if required
	 *	@param evt event
	 */
	private void formWindowOpened(java.awt.event.WindowEvent evt) 
	{
		if (m_maximize == true)
		{
			super.setVisible(true);
			super.setExtendedState(JFrame.MAXIMIZED_BOTH);
		}
  }	//	formWindowOpened

//Add window and tab no called from
	
	public void setProcessInfo(ProcessInfo pi)
	{
		m_pi = pi;
		
	}
	
	public ProcessInfo getProcessInfo()
	{
		return m_pi;
	}

	// End
	
	/**
	 * 	Start Batch
	 *	@param process
	 *	@return running thread
	 */
	public Thread startBatch (final Runnable process)
	{
		Thread worker = new Thread()
		{
			public void run()
			{
				setBusy(true);
				process.run();
				setBusy(false);
			}
		};
		worker.start();
		return worker;
	}	//	startBatch

	/**
	 * @return Returns the AD_Form_ID.
	 */
	public int getAD_Form_ID ()
	{
		return 0;
	}	//	getAD_Window_ID
	/**
	 * @return Returns the  manuBar
	 */
	public JMenuBar getMenu()
	{
		return menuBar;
	}
    private void construyeTodo(JFrame contenedor)
    {
     
        monitor = new javax.swing.JPanel();
     //   monitordetalle = new javax.swing.JPanel();
     //   monitordetalle.setLayout(new GridLayout(1,5));
        monitor.setLayout(new GridLayout(1,1));
        monitor.setPreferredSize(new Dimension(800, 600));
        monitor.add(construyePanel());
        monitor.setBackground(new java.awt.Color(204, 204, 204));
        monitor.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
        javax.swing.GroupLayout monitorLayout = new javax.swing.GroupLayout(monitor);

        ScrollMonitor = new JScrollPane(monitor);
        ScrollMonitor.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        ScrollMonitor.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

        
   //     ScrollMonitorDetalle = new JScrollPane(monitordetalle);
   //     ScrollMonitorDetalle.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
   //     ScrollMonitorDetalle.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);  
        monitorLayout.setHorizontalGroup(
            monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        monitorLayout.setVerticalGroup(
            monitorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
     //   monitordetalle.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)));
      //  javax.swing.GroupLayout monitordetalleLayout = new javax.swing.GroupLayout(monitordetalle);
       // monitordetalle.setLayout(monitordetalleLayout);
        //monitordetalleLayout.setHorizontalGroup(
        //    monitordetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         //   .addGap(0, 737, Short.MAX_VALUE)
       // );
        //monitordetalleLayout.setVerticalGroup(
         //   monitordetalleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          //  .addGap(0, 640, Short.MAX_VALUE)
        //);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(contenedor.getContentPane());
        contenedor.getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScrollMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                //.addComponent(ScrollMonitorDetalle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                 //   .addComponent(ScrollMonitorDetalle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ScrollMonitor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
 	}	
    private JScrollPane construyePanel()
    {

       JScrollPane sc =  null;
       String el_Nombre_Indicador ="";
	   String sql = "SELECT * FROM MONITORLINE WHERE IsActive='Y' AND MONITORLINE_ID=" + this.elmonitor_id  
				+ " ORDER BY MONITORLINE_ID";
		sql = MRole.getDefault(Env.getCtx(), false).addAccessSQL(sql.toUpperCase(), "MONITORLINE", 
				false, true);	//	RW to restrict Access
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try
		{
			pstmt = DB.prepareStatement (sql, null);
		    rs = pstmt.executeQuery ();
		    while (rs.next ())
		    {
				MMONITORLINE el_indicador = new MMONITORLINE (Env.getCtx(), rs, null);
			   el_Nombre_Indicador=el_indicador.getName();
			   String sSqlDetalle = el_indicador.getQUERYMONITOR();
               MTable tmp_table = new MTable(Env.getCtx(),el_indicador.getTablaVentana(),null);
               String el_NombreDeTabla = tmp_table.get_ValueAsString("tablename");
               sSqlDetalle = MRole.getDefault(Env.getCtx(), false).addAccessSQL(sSqlDetalle.toUpperCase(),el_NombreDeTabla.toUpperCase(), 
            		   false, true);	//	RW to restrict Access	
				// Lleno el rs
               PreparedStatement pstmtdetalle = null;
			   ResultSet rsdetalle = null;
			   try
			   {
				   int lasFilas =GetBottonesRow(sSqlDetalle);
				   int cols = ((lasFilas-1) % 8) + 1;
				   CPanel el_panel = new CPanel (new GridLayout(0,2));
				   pstmtdetalle = DB.prepareStatement (sSqlDetalle, null);
				   rsdetalle = pstmtdetalle.executeQuery ();
				   boolean encontro_detalle = false;
				   
				   
				   while (rsdetalle.next ())
				   {
					  encontro_detalle=true;
				      String initialText =EvaluaHtml(el_indicador.getHTMLBUTTON(),rsdetalle); 
                      MButton el_boton = new MButton();
				      el_boton.setText(initialText);
					  el_boton.SetValor_CampoID(rsdetalle.getInt(el_indicador.getCOLUMNAMECLAVE()));
					  el_boton.SetNombreCampoID(el_indicador.getCOLUMNAMECLAVE());
					  el_boton.SetAD_Window_ID(el_indicador.getAD_Window_ID());
					  el_boton.SetAD_Table_ID(el_indicador.getTablaVentana());
					  int BUTTONWIDTH =el_indicador.getButtonHigh();
					  int BUTTONHIGH= el_indicador.getButtonWidth();
					  if(BUTTONWIDTH!=0 | BUTTONHIGH!=0  )
					  {
					     el_boton.setPreferredSize(new Dimension(BUTTONWIDTH,BUTTONHIGH));
					  }
					  else
					  {
						el_boton.setPreferredSize(new Dimension(80,100));	
					  }
							// El Color
				      MPrintColor color = MPrintColor.get(Env.getCtx(),el_indicador.getAD_PrintColor_ID());
					  Color keyColor = Color.lightGray;
					  keyColor = color.getColor();
					  el_boton.setBackground(keyColor);
					// La accion 
					  el_boton.setActionCommand(String.valueOf(el_indicador.getCOLUMNAMECLAVE()));
					  el_boton.addActionListener(this);
                      el_panel.add(el_boton);
					  el_panel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 0, 0)), el_Nombre_Indicador));
					}

				   
				   sc = new JScrollPane(el_panel);
				   sc.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
				   sc.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
				   el_panel.setPreferredSize(new Dimension(cols*80, lasFilas*50));
				   if(encontro_detalle)
				       monitor.add(sc);
				
             }
				catch (Exception e)
				{
					//	s_log.log (Level.SEVERE, sql, e);
			    }
			    finally
			    {
				   DB.close(rsdetalle, pstmtdetalle);
				   rsdetalle = null; pstmtdetalle = null;
			    }
	        }
		}
		catch (Exception e)
		{
			//	s_log.log (Level.SEVERE, sql, e);
		}
		finally
		{
			DB.close(rs, pstmt);
			rs = null; pstmt = null;
		}
		return sc;
	}	
    private String EvaluaHtml(String htmlbutton, ResultSet rsdetalle) {
		String sRetorno="";
		sRetorno=EvaluaSitaxis(Env.getCtx(), htmlbutton,rsdetalle);
		
		return sRetorno;
	}
	public static String EvaluaSitaxis(Properties ctx, String text,ResultSet rsdetalle)
	{
		if (text == null || text.length() == 0)
			return text;

		String inStr = text;
		String token;
		StringBuffer outStr = new StringBuffer();

		int i = inStr.indexOf('@');
		while (i != -1)
		{
			outStr.append(inStr.substring(0, i));			// up to @
			inStr = inStr.substring(i+1, inStr.length());	// from first @

			int j = inStr.indexOf('@');						// next @
			if (j < 0)										// no second tag
			{
				inStr = "@" + inStr;
				break;
			}

			token = inStr.substring(0, j);
			 try
			   {
				   outStr.append(rsdetalle.getString(token));			// replace context	   
			   }
				catch (Exception e)
				{
					//	s_log.log (Level.SEVERE, sql, e);
			    }		   
			inStr = inStr.substring(j+1, inStr.length());	// from second @
			i = inStr.indexOf('@');
		}

		outStr.append(inStr);           					//	add remainder
		return outStr.toString();
	}   //  parseTranslation

    
    private int GetBottonesRow(String Sql)
    {

    	int iRetorno =0;
    	PreparedStatement pstmtdetalle = null;
		ResultSet rsdetalle = null;
		try
			{
				pstmtdetalle = DB.prepareStatement (Sql, null);
				rsdetalle = pstmtdetalle.executeQuery ();
				while (rsdetalle.next ())
					iRetorno++;
			}
			catch (Exception e)
			{
			//	s_log.log (Level.SEVERE, sql, e);
			}
			finally
			{
				DB.close(rsdetalle, pstmtdetalle);
				rsdetalle = null; pstmtdetalle = null;
			}
	   return iRetorno;	
    }
	public class sincorinza extends Applet implements Runnable {
		public sincorinza () { 
			   super();
		   }
		private Thread hilo;


		/************************************************************************
		* run del hilo: se duerme durante un segundo
		***********************************************************************/
		public void run() {
			while ( hilo != null ) {
				try {
					Thread.sleep( el_tiempo );
				}
				catch (InterruptedException e ) { return; }
				paint();
			}
		}

		public void paint(  ) {
			monitor.removeAll();
			//monitordetalle.removeAll();
			
			m_frame.remove(ScrollMonitor);
			//m_frame.remove(ScrollMonitorDetalle);
			
        	 construyeTodo(m_frame);
			 m_frame.repaint();
		}

		/***********************************************************************
		* No confundirse: este metodo es el start del applet.
		* Desde aquí llamamos a start del hilo.
		***********************************************************************/
		public void start(  ) {
			if ( hilo == null ) {
				hilo = new Thread(this);  // Coloco applet en hilo
				hilo.start();
			}
		}

		/***********************************************************************
		* Parada del applet: si la referencia al hilo no es nula: paro el hilo.
		***********************************************************************/
		public void stop(  ) {
			if ( hilo != null ) {
				hilo.interrupt();
				hilo = null;
			}
		}
	}
	@Override
	public void init(int WindowNo, FormFrame frame) {
		// TODO Auto-generated method stub
		log.fine("");
		m_WindowNo = WindowNo;
		m_frame = frame;
	}	

}
